Scala

Expressions 

    Expression are computable statements.
    
        1+1
        
    You can output results of expressions using println
    
        println(1)              // 1
        println(1 + 1)          // 2
        println("Hello!")       // Hello!
        println("Helllo, " + " World!") // Hello, World!
        
Values

    You can name results of expressions with the val keyword.
    
        val x = 1+1
        println(x)  // 2
        
    Named results, such as x here, are called values. Referencing a value does not re-compute it.
    
    Values cannot be re-assigned.
    
        x = 3 // This does not compile.
        
    Types of values can be inferred, but you can also explicity state the type, like this:
    
        val x: Int = 1 + 1
        
    Notice how the type declaration Int comes after the identifier x . You also need a : .
    
Variables

    Variables are like values, except you can re-assign them. You can define a variable with the var keyword.
    
        var x = 1 + 1
        x = 3 // This compile because "x" declared with the "var" keyword.
        println(x * x) // 9
        
    As with values, you can explicity state the type if you want:
    
        var x: Int = 1 + 1
        
Blocks

    You can combine expressions by surronding them with {}. We call this a block.
    
    The results of the last expression in the block is the result of the overall block, too.
    
        println({
            val x = 1 + 1
            x + 1
        }) // 3
        
Functions 
    
    Functions are expressions that take parameters.
    
    You can define an anonymous function (i.e. no name) that returns a given integer plus one:
    
        (x: Int) => x + 1
        
    On the left of => is a list of parameters. On teh right is an expression involving the parameters.
    
    You can also name functions.
    
        val addOne = (x: Int) => x + 1
        println(addOne(1)) // 2
        
    Functions may take multiple parameters.
    
        val add = (x: Int, y: Int) => x + y
        println(add(1, 2)) // 3
        
    Or it can take no parameters.
        
        val getTheAnswer = () => 42
        println(getTheAnswer()) // 42
        
Methods

    Methods look and behave very similar to functions, but there are a few key differences between them.
    
    Methods are defined with the def keyword. def is followed by a name, parameter lists, a return type, and a body.
    
        def add(x: Int, y: Int): Int = x + y
        println(add(1, 2) // 3
        
    Notice how the return type is declared after the parameter list and a colon : Int

    Methods can take multiple parameter lists.
    
        def addThenMultiply(x: Int, y: Int)(multiplier: Int): Int = (x + y) * multiplier
        println(addThenMultiply(1, 2)(3)) // 9
        
    Or no parameter at all.
    
        def name: String = System.getProperty("user.name")
        println("Hello, " + name + "!")
        
    There are some other differences, but for now, you can think of them as something similar to functions.
    
    Methods can have multi-line expressions as well.
    
        def getSquareString(input: Double): String = {
            val square = input * input
            sqaure.toString
        }
        
    The last expression in the body is the method's return value. (Scala does have a return keyword, but it's rarely used.)
    
Classes

    You can define classed with the class keyword followed by its name and constructor parameters.
    
        class Greeter(prefix: String, suffix:String){
            def greet(name: String): Unit =
                println(prefix + name + suffix)
        }
    
    The return type of the method greet is Unit, which says there's nothing meaningful to return. It's used similarly to void in Java and C. (A different is that because every Scala expressions must have some value, there is actually a singleton value of type Unit, written (). It carries no information.)
    
    You can make an instance of a class with the new keyword
    
        val greeter = new Greeter("Hello, ", "!")
        greeter.greet("Scala developer") // Hello, Scala Developer!
        
    We will cover class in depth later.
        
Case Classes

    Scala has a special type of class called a "case" class. By default, case classes are immutable and compared by value. You can define case classes with the case class keywords.

        case class Point(x: Int, y: Int)
        
    You can instantiate case classes without new keyword.
    
        val point = Point(1, 2)
        val anotherPoint = Point(1, 2)
        val yetAnotherPoint = Point(2,2)
        
    And they are compared by value.
    
        if(point == anotherPoint) {
            println(point + " and " + anotherPoint + " are the same.")
        } else {
            println(point + " and " + anotherPoint + " are different.")
        } // Point(1,2) and Point(1,2) are the same.
        
        if(point == yetAnotherPoint) {
            println(point + " and " + yetAnotherPoint + " are the same.")
        } else {
            println(point + " and " + yetAnotherPoint + " are different.")
        } // Point(1,2) and Point(2,2) are different.
    
    There is a lot more to case classes that we'd like to introduce, and we are convinced you will fall in love with them! We will cover them in depth later.
        
Object 
    
    Objects are single instances of their own definitions. You can think of them as singletons of their own classes.
    
    You can define objects with the object keyword.
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
